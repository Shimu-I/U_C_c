# -*- coding: utf-8 -*-
"""Python Class 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dFvY5gG6w3RXsOOxRdlwtbmKLFKB2UmT

### List Slicing
"""

nums = [i**2 for i in range(10)] # list comprehension
print(nums)
len(nums)

for i in nums:
  print(i)

first_nums = nums[0:5]
# last_nums = nums[]
print(first_nums)
last_nums = nums[5:]
print(last_nums)

arr = nums[:]
print(arr)

odd_nums = nums[1::2]
print(odd_nums)

print(nums[-1])

reverse_nums = nums[::-1]
print(reverse_nums)

"""### Tuple"""

coordinates = (5,0)
marks = [('A',90),('A-',86)]
print(coordinates[0])
print(marks[1][0])
# coordinates[1] = 4

"""### Dictionary"""

student = {
    'name':'Rahim',
    'id':2,
    'cgpa':3.73,
    'courses':['AI','OS','DBMS'],
    8:'trimester'
}

student['blood group'] = 'A+'
student['cgpa'] = 3.76

student
print(student.keys())
print(student.values())
print(student.items())

for key in student:
  print(key,student[key])

for k,v in student.items():
  print(k,v)

student['name']

student.get('id')

"""### Object"""

class student:
  def __init__(self,name,id,cgpa,trimester):
    self.name = name
    self.id = id
    self.__cgpa = cgpa
    self.trimester = trimester


  def getCgpa(self):
    return self.__cgpa
  @staticmethod
  def study():
    print("Studying!!")

  def __str__(self):
    return self.name + " " + str(self. id) + " " + (self.trimester)


st = student('Rahim',10,3.85,'5th')
print(st.name)
print(st.getCgpa())
student.study()
print(st)

"""## Numpy Library"""

lst1 = [1,2,3,4,5]
lst2 = [2,3,4,5,6]
print(type(lst1),type(lst2))
lst1+lst2

# pip install numpy
import numpy as np

arr1 = np.array([1,2,3,4,5])
arr2 = np.array([2,3,4,5,6])
print(type(arr1),type(arr2))
print(arr1 + arr2)
print(lst1 * 3)
print(arr1 * 3)

print(arr1.shape)

mat = np.array([
    [1,2,3],
    [4,5,6]])
print(mat.shape)

# reshaping an array
print(mat.reshape((6,)))
print(arr1.reshape((1,5)))
print(arr1.reshape((5,1)))

mat = np.random.random((2,2))
print(mat)
int_mat = np.random.randint(10,size=(3,3))
print(int_mat)

zero_mat = np.zeros((2,2),dtype = 'int64')
print(zero_mat)
ones_mat = np.ones((2,2))
print(ones_mat)
identity_mat = np.eye(3)
print(identity_mat)

"""### Slicing"""

arr1 = np.array([1,2,3,4,5])
arr1[:3]

mat = np.array([
    [1,2,3],
    [4,5,6]]) #[[1,2],[4,5]]

temp = mat[:,:-1]
print(temp)

mat = np.array([
    [1,2,3],
    [4,5,6]]) #[[1,3],[4,6]]
temp = mat[:,::2]
print(temp)

mat = np.array([
    [1,2,3],
    [4,5,6],
    [7,8,9]]) #[[1,3],[7,9]]
temp = mat[::2,::2]
print(temp)

mat = np.array([
    [1,2,3],
    [4,5,6],
    [7,8,9]]) #[[5,6],[8,9]]
# temp = mat[::2,::2]
print(temp)

"""### Axis summation"""

arr1 = np.array([1,2,3,4,5])
print(np.sum(arr1))

mat = np.array([
    [1,2,3],
    [4,5,6]])
print(mat.shape)
print(np.sum(mat))
print(np.sum(mat,axis=0)) # column-wise
print(np.sum(mat,axis=1)) # row-wise

mat = np.array([
    [
      [1,2,3],
      [4,5,6],
      [7,8,9]
    ],
    [
      [1,2,3],
      [4,5,6],
      [7,8,9]
    ]
    ])
print(mat.shape)
print(np.sum(mat,axis=0))
print(np.sum(mat,axis=1))
print(np.sum(mat,axis=2))