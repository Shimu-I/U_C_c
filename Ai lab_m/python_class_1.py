# -*- coding: utf-8 -*-
"""Python Class 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YCiV7nRJpxT5X9w-J5Hr8AOALn50bY5i

## Basics
"""

print("Hello World")

# int a = 10,b = 20;
a = 10
b = 2.0
c = 'AI'
print(a,b,c)

print(type(a))
print(type(b))
print(type(c))

print(a + b)
print(str(b) + c)

a,b,c = 10,20,'AI'
a, b = b,a
print(a,b,c)

if a>b:
  print("A is bigger")
  a = 10
  b = 20
elif b>a:
  print("B is bigger")
else:
  print('Same')
print(a,b)

a = 5
a +=1 #6
a *= 2.0 # 12.0
13.5 % 5.5
a ** 2

# scanf
# cin
# scanner
x = input("Enter a number")
x = int(x)
print(type(x))
int(x) + 10
print(type(x))

students = 36
pc = 35
print(f"There are {students} students in the class, but only {pc} pcs")

"""### Loop"""

# for(int i=1;i<=10;i++)
for i in range(1,20,2):
  # print(i,end=' ')
  print(i)

for i in range(20,-1,-2):
  print(i)

for i in range(1,10):
  for j in range(i+1,10):
    print(j)

num = 10
while num != 0:
  print(num)
  num -= 1

marks = 87
if marks >= 90:
  print('A')
elif marks >= 86 and marks <90:
  print('A-')
elif marks >= 55 or marks <=85:
  print('Pass')

"""### Functions"""

def printNumbers(n):
  x = int(input())
  for i in range(x,n):
    print(i)
printNumbers(5)

def calculateMarks(att,ct=0,mid=0,final=35):
  return att+ct+mid+final

# print(calculateMarks()) required 1 positional argument
print(calculateMarks(5))
print(calculateMarks(5,10))
print(calculateMarks(ct=19,att=5))
# print(calculateMarks(ct=19,5)) positional argument follows keyword argument
print(calculateMarks(5,ct=19))
print(calculateMarks(5,ct=19,final=37,mid=25))
print(calculateMarks(final = 100,att=5))

"""### List (Heterogeneous Data Structure)"""

# int arr[] = {1,2,3,4,5}
lst = list()
print(type(lst))

lst = [1,2.0,'AI',4]
lst

nums = []
nums.append(1) # add an element to the end of the list
print(nums)

lst.insert(2,'CSE 3812') # add an element to a specific index
lst

lst[2] = 3.0
lst

lst

lst.pop()

lst.pop(1)

lst

lst.remove('AI')

lst

odd_nums = [1,3,5,7,9]
even_nums = [2,4,6,8,10]
nums = odd_nums+even_nums
nums

nums = []
nums.append(odd_nums)
nums.append(even_nums)
nums

nums=[]
nums.extend(odd_nums)
nums.extend(even_nums)
nums

lst = [1,2,3]
lst * 3

